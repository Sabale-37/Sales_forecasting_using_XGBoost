# -*- coding: utf-8 -*-
"""Sales_prediction_using_XGBoost.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1t65R7gxCDKNX1Mvtk8b8-yGWmDpG-PGW

# XGBoost

## Importing the libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

"""## Importing the dataset"""

big_mart_data = pd.read_csv('Train.csv')
X = big_mart_data.iloc[:, :-1].values
y = big_mart_data.iloc[:, -1].values

big_mart_data.head()

"""# Taking care of missing Data

"""

from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(X[:, 1:2])
X[:, 1:2] = imputer.transform(X[:, 1:2])

big_mart_data['Outlet_Size'].mode()
mode_of_Outlet_size = big_mart_data.pivot_table(values='Outlet_Size', columns='Outlet_Type', aggfunc=(lambda x: x.mode()[0]))
miss_values = big_mart_data['Outlet_Size'].isnull()
big_mart_data.loc[miss_values, 'Outlet_Size'] =big_mart_data.loc[miss_values,'Outlet_Type'].apply(lambda x: mode_of_Outlet_size[x])

"""# Encoding Categorical Data"""

from sklearn.preprocessing import LabelEncoder
encoder = LabelEncoder()
big_mart_data['Item_Identifier'] = encoder.fit_transform(big_mart_data['Item_Identifier'])

big_mart_data['Item_Fat_Content'] = encoder.fit_transform(big_mart_data['Item_Fat_Content'])

big_mart_data['Item_Type'] = encoder.fit_transform(big_mart_data['Item_Type'])

big_mart_data['Outlet_Identifier'] = encoder.fit_transform(big_mart_data['Outlet_Identifier'])

big_mart_data['Outlet_Size'] = encoder.fit_transform(big_mart_data['Outlet_Size'])

big_mart_data['Outlet_Location_Type'] = encoder.fit_transform(big_mart_data['Outlet_Location_Type'])

big_mart_data['Outlet_Type'] = encoder.fit_transform(big_mart_data['Outlet_Type'])

"""# Data Preprocessing"""

X = big_mart_data.iloc[:, :-1].values
y = big_mart_data.iloc[:, -1].values
big_mart_data.head()

"""## Splitting the dataset into the Training set and Test set"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.2, random_state = 0)

"""## Training XGBoost on the Training set"""

from xgboost import XGBRegressor
regressor = XGBRegressor()
regressor.fit(X_train, y_train)

"""# Prediction

"""

from sklearn import metrics
test_data_prediction = regressor.predict(X_test)
r2_test = metrics.r2_score(y_test, test_data_prediction)
print('R Squared value = ', r2_test)